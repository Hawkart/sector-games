
@function gcd($a, $b) {
    // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
    @if ($b != 0) {
        @return gcd($b, $a % $b);
    } @else {
        @return abs($a);
    }
}

@function pow($base, $exponent, $prec: 12) {
    // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
    @if (floor($exponent) != $exponent) {
        $prec2 : pow(10, $prec);
        $exponent: round($exponent * $prec2);
        $denominator: gcd($exponent, $prec2);

        // From: http://rosettacode.org/wiki/Nth_root#JavaScript
        $num: pow($base, $exponent / $denominator);
        $n: $prec2 / $denominator;
        $prec: $prec;

        $x: 1;
        @for $i from 0 through $prec {
            $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
        }

        @return $x;
    }

    $value: $base;
    @if $exponent > 1 {
        @for $i from 2 through $exponent {
            $value: $value * $base;
        }
    } @else if $exponent < 1 {
        @for $i from 0 through -$exponent {
            $value: $value / $base;
        }
    }

    @return $value;
}

@function color_luminance($color) {
    // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
    // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();

    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;

        $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

        $rgba2: append($rgba2, $rgb);
    }

    @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + .0722 * nth($rgba2, 3);
}
